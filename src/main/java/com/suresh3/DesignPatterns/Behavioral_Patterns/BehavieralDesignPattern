Behavioral Design Patterns
========================
Behavioral design patterns are concerned with algorithms and the assignment of responsibilities between objects.
They help in defining how objects interact and communicate with each other.
These patterns are all about class's objects communication.
They help in defining how objects interact and communicate with each other.
They are all about class's objects communication.
Examples of behavioral design patterns include:
- Chain of Responsibility
- Command
- Interpreter
- Iterator
- Mediator
- Memento
- Observer (Important)
- State
- Strategy (Important)
- Template Method
- Visitor
- Null Object
- Specification
- Publish-Subscribe (Important)
- Event Queue
- Event Sourcing
- CQRS (Command Query Responsibility Segregation) (Important)
- State Machine
- Event Sourcing
- Saga Pattern (Orchestration and Choreography) (Important)
- Event Aggregator
- Event Bus
- Event Stream
- Event Storming
- Event Sourcing
- Event Sourcing

Example: Observer Pattern
================================
The Observer pattern is a behavioral design pattern that defines a one-to-many dependency
between objects so that when one object changes state, all its dependents are notified and updated automatically.
This pattern is often used in event handling systems, where multiple objects need to be notified of changes in another object.
In this example, we will create a simple weather station that notifies observers when the temperature changes.

```java

class WeatherStation {
    private List<Observer> observers = new ArrayList<>();
    private int temperature;

    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    public void setTemperature(int temperature) {
        this.temperature = temperature;
        notifyObservers();
    }

    private void notifyObservers() {
        for (Observer observer : observers) {
            observer.update(temperature);
        }
    }
}
interface Observer {
    void update(int temperature);
}
class TemperatureDisplay implements Observer {
    @Override
    public void update(int temperature) {
        System.out.println("Temperature updated: " + temperature);
    }
}
class WeatherApp implements Observer {
    @Override
    public void update(int temperature) {
        System.out.println("Weather app updated: " + temperature);
    }
}
public class Main {
    public static void main(String[] args) {
        WeatherStation weatherStation = new WeatherStation();
        TemperatureDisplay temperatureDisplay = new TemperatureDisplay();
        WeatherApp weatherApp = new WeatherApp();

        weatherStation.addObserver(temperatureDisplay);
        weatherStation.addObserver(weatherApp);

        weatherStation.setTemperature(25);
        weatherStation.setTemperature(30);
    }
}
```
In this example, we have a `WeatherStation` class that maintains a list of observers.
When the temperature changes, it notifies all registered observers by calling their `update` method.
The `Observer` interface defines the `update` method that all observers must implement.
The `TemperatureDisplay` and `WeatherApp` classes implement the `Observer` interface and provide their own implementations of the `update` method.
The `Main` class demonstrates how to use the `WeatherStation` and its observers.
When the temperature is set, both observers are notified and print the updated temperature.
This pattern allows for a flexible and decoupled design, where the `WeatherStation` does not need to know about the specific observers it is notifying.
The Observer pattern is useful in scenarios where multiple objects need to be notified of changes in another object, such as in GUI applications, event handling systems, and real-time data updates.
The Observer pattern is a powerful tool for creating flexible and decoupled systems, allowing for easy addition or removal of observers without modifying the subject.
The Observer pattern is widely used in various applications, including GUI frameworks, event handling systems, and real-time data updates.
The Observer pattern is a powerful tool for creating flexible and decoupled systems, allowing for easy addition or removal of observers without modifying the subject.
The Observer pattern is widely used in various applications, including GUI frameworks, event handling systems, and real-time data updates.

what all use cases can be used:::
The use cases of the Observer pattern are numerous and can be applied in various scenarios. Here are some common use cases:
1. **GUI Frameworks**: In graphical user interface (GUI) frameworks, where multiple components need to be notified of changes in the state of other components (e.g., buttons, text fields).
2. **Event Handling**: In event-driven programming, where multiple listeners need to be notified of events (e.g., mouse clicks, keyboard input).
3. **Real-time Data Updates**: In applications that require real-time data updates (e.g., stock market tickers, weather updates), where multiple components need to be notified of changes in data.
4. **Model-View-Controller (MVC)**: In the MVC architectural pattern, where the model notifies the view of changes in data, allowing the view to update accordingly.
5. **Chat Applications**: In chat applications, where multiple users need to be notified of new messages or status changes.
6. **Game Development**: In game development, where multiple game objects need to be notified of changes in the game state (e.g., player position, score updates).
7. **Data Binding**: In data binding frameworks, where changes in the data model need to be reflected in the user interface automatically.
8. **Logging Frameworks**: In logging frameworks, where multiple loggers need to be notified of log events (e.g., console, file, remote logging).
9. **Configuration Management**: In applications that require configuration changes to be propagated to multiple components (e.g., application settings, user preferences).
10. **Notification Systems**: In notification systems, where multiple subscribers need to be notified of events (e.g., email notifications, push notifications).
11. **Data Synchronization**: In distributed systems, where multiple components need to be notified of changes in data to maintain consistency.
12. **Sensor Networks**: In sensor networks, where multiple sensors need to be notified of changes in the environment (e.g., temperature, humidity).
13. **Social Media**: In social media applications, where users need to be notified of changes in their friends' statuses or activities.
14. **Stock Market Applications**: In stock market applications, where multiple components need to be notified of changes in stock prices or market trends.
15. **E-commerce Applications**: In e-commerce applications, where users need to be notified of changes in product availability, prices, or promotions.
16. **Content Management Systems**: In content management systems, where multiple components need to be notified of changes in content (e.g., articles, images).
17. **Workflow Management**: In workflow management systems, where multiple components need to be notified of changes in the workflow state (e.g., task completion, approval).
18. **Data Visualization**: In data visualization applications, where multiple charts or graphs need to be updated based on changes in the underlying data.
19. **Game Engines**: In game engines, where multiple game objects need to be notified of changes in the game state (e.g., player position, score updates).
20. **IoT Applications**: In Internet of Things (IoT) applications, where multiple devices need to be notified of changes in the environment (e.g., temperature, humidity).








Example: Strategy Pattern :
================================
The Strategy pattern is a behavioral design pattern that defines a family of algorithms, encapsulates each one, and makes them interchangeable.
The Strategy pattern lets the algorithm vary independently from clients that use it.
This pattern is often used when you have multiple algorithms for a specific task and want to choose the algorithm at runtime.
In this example, we will create a simple payment processing system that uses the Strategy pattern to allow different payment methods.

```java
interface PaymentStrategy {
    void pay(int amount);
}
class CreditCardPayment implements PaymentStrategy {
    @Override
    public void pay(int amount) {
        System.out.println("Paid " + amount + " using Credit Card.");
    }
}
class PayPalPayment implements PaymentStrategy {
    @Override
    public void pay(int amount) {
        System.out.println("Paid " + amount + " using PayPal.");
    }
}
class ShoppingCart {
    private PaymentStrategy paymentStrategy;

    public void setPaymentStrategy(PaymentStrategy paymentStrategy) {
        this.paymentStrategy = paymentStrategy;
    }

    public void checkout(int amount) {
        if (paymentStrategy == null) {
            System.out.println("No payment method selected.");
            return;
        }
        paymentStrategy.pay(amount);
    }
}
public class Main {
    public static void main(String[] args) {
        ShoppingCart cart = new ShoppingCart();

        cart.setPaymentStrategy(new CreditCardPayment());
        cart.checkout(100);

        cart.setPaymentStrategy(new PayPalPayment());
        cart.checkout(200);
    }
}
```
In this example, we have a `PaymentStrategy` interface that defines the `pay` method.
The `CreditCardPayment` and `PayPalPayment` classes implement the `PaymentStrategy` interface and provide their own implementations of the `pay` method.
The `ShoppingCart` class uses a `PaymentStrategy` to process payments.
The `setPaymentStrategy` method allows the client to choose the payment method at runtime.
The `checkout` method uses the selected payment strategy to process the payment.
The `Main` class demonstrates how to use the `ShoppingCart` and its payment strategies.
When the payment strategy is set, the `checkout` method processes the payment using the selected strategy.
This pattern allows for a flexible and decoupled design, where the `ShoppingCart` does not need to know about the specific payment methods it is using.
The Strategy pattern is useful in scenarios where you have multiple algorithms for a specific task and want to choose the algorithm at runtime, such as in sorting algorithms, payment processing systems, and data compression algorithms.
The Strategy pattern is a powerful tool for creating flexible and decoupled systems, allowing for easy addition or removal of strategies without modifying the context.
The Strategy pattern is widely used in various applications, including sorting algorithms, payment processing systems, and data compression algorithms.
The Strategy pattern is a powerful tool for creating flexible and decoupled systems, allowing for easy addition or removal of strategies without modifying the context.
The Strategy pattern is widely used in various applications, including sorting algorithms, payment processing systems, and data compression algorithms.
```
The Strategy pattern is a powerful tool for creating flexible and decoupled systems, allowing for easy addition or removal of strategies without modifying the context.
The Strategy pattern is widely used in various applications, including sorting algorithms, payment processing systems, and data compression algorithms.
```
The Strategy pattern is a powerful tool for creating flexible and decoupled systems, allowing for easy addition or removal of strategies without modifying the context.
The Strategy pattern is widely used in various applications, including sorting algorithms, payment processing systems, and data compression algorithms.
```
what all use cases can be used:::
the use cases of the Strategy pattern are numerous and can be applied in various scenarios. Here are some common use cases:
1. **Sorting Algorithms**: When you have multiple sorting algorithms (e.g., QuickSort, MergeSort, BubbleSort) and want to choose one at runtime based on the data or user preference.
2. **Payment Processing**: In e-commerce applications, where different payment methods (e.g., Credit Card, PayPal, Bitcoin) can be selected by the user at checkout.
3. **Data Compression**: When you have multiple data compression algorithms (e.g., ZIP, GZIP, LZ77) and want to choose one based on the type of data being compressed.
4. **Route Calculation**: In navigation applications, where different routing algorithms (e.g., Dijkstra's, A*) can be used to find the best path based on user preferences (e.g., shortest distance, fastest time).
5. **Game AI**: In video games, where different AI strategies (e.g., aggressive, defensive, stealth) can be applied to control the behavior of non-player characters (NPCs).
6. **Text Formatting**: In text editors, where different formatting strategies (e.g., Markdown, HTML, LaTeX) can be used to render text based on user preference.
7. **Image Processing**: When applying different image processing algorithms (e.g., filters, transformations) based on user selection or image characteristics.
8. **Logging**: In logging frameworks, where different logging strategies (e.g., Console, File, Remote) can be used to log messages based on the application's configuration.
9. **Search Algorithms**: When implementing search functionality, where different search algorithms (e.g., linear search, binary search) can be used based on the data structure and requirements.
10. **Validation**: In form validation, where different validation strategies (e.g., regex, custom validation) can be applied based on the type of input.
11. **Notification Systems**: In applications that send notifications, where different notification strategies (e.g., email, SMS, push notifications) can be used based on user preferences.
12. **Machine Learning**: In machine learning applications, where different algorithms (e.g., decision trees, neural networks, support vector machines) can be used for training and prediction based on the data and requirements.
13. **Text Processing**: In text processing applications, where different text processing strategies (e.g., tokenization, stemming, lemmatization) can be applied based on the requirements.
14. **Data Transformation**: In data processing pipelines, where different transformation strategies (e.g., filtering, mapping, reducing) can be applied based on the data and requirements.
15. **User Interface Rendering**: In UI frameworks, where different rendering strategies (e.g., immediate mode, retained mode) can be used based on the application's requirements.
16. **File Compression**: In file compression applications, where different compression algorithms (e.g., ZIP, RAR, TAR) can be used based on the file type and user preference.
17. **Authentication**: In authentication systems, where different authentication strategies (e.g., password-based, token-based, biometric) can be used based on user preference or security requirements.
18. **Data Access**: In data access layers, where different data access strategies (e.g., ORM, raw SQL, NoSQL) can be used based on the application's requirements.
19. **Configuration Management**: In applications that require different configuration strategies (e.g., XML, JSON, YAML) based on user preference or environment.
20. **Data Serialization**: In applications that require different serialization strategies (e.g., JSON, XML, Protocol Buffers) based on the data and requirements.
```
The Strategy pattern is a powerful tool for creating flexible and decoupled systems, allowing for easy addition or removal of strategies without modifying the context.
The Strategy pattern is widely used in various applications, including sorting algorithms, payment processing systems, and data compression algorithms.
```




