Behavioral Design Patterns:::
==============================

These patterns focus on communication between objects, how objects interact and fulfill their responsibilities.

    Chain of Responsibility: Passes a request along a chain of handlers, where each handler can either process
    the request or pass it to the next handler in the chain.

    Command: Encapsulates a request as an object, thereby allowing parameterization of clients with queues,
    requests, and operations.

    Interpreter: Defines a grammatical representation for a language and an interpreter to interpret the
    grammar.

    Iterator: Provides a way to access elements of a collection sequentially without exposing the underlying
    representation.

    Mediator: Defines an object that encapsulates how a set of objects interact, promoting loose coupling
    by keeping objects from referring to each other explicitly.

    Memento: Allows capturing and restoring an object's internal state without violating encapsulation.

    Observer: Defines a one-to-many dependency between objects so that when one object changes state, all
    its dependents are notified and updated automatically.

    State: Allows an object to alter its behavior when its internal state changes, appearing to change
    its class.

    Strategy: Defines a family of algorithms, encapsulates each one, and makes them interchangeable.

    Template Method: Defines the skeleton of an algorithm in a method, deferring some steps to subclasses.

    Visitor: Represents an operation to be performed on elements of an object structure, allowing new
    operations to be defined without changing the classes of the elements.

