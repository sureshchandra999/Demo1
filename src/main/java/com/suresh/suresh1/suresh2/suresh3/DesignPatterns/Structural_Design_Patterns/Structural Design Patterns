Structural Design Patterns:

These patterns deal with object composition, creating relationships between objects to form larger structures.

    Adapter: Allows incompatible interfaces to work together by wrapping an existing class with a new interface.

    Bridge: Separates an objectâ€™s interface from its implementation so that the two can vary independently.

    Composite: Composes objects into tree structures to represent part-whole hierarchies, allowing individual
    objects and compositions to be treated uniformly.

    Decorator: Adds additional functionality to an object dynamically by placing it inside a wrapper object.

    Facade: Provides a simplified interface to a complex subsystem.

    Flyweight: Reduces the cost of creating and manipulating a large number of similar objects by
    sharing as much data as possible.

    Proxy: Provides a surrogate or placeholder for another object to control access to it.

